name: Unit Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/unit-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Setup pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false
      
      # Step 3: Setup Node.js (without cache to avoid timeout)
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      # Step 4: Get pnpm store directory
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      
      # Step 5: Setup pnpm cache
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      # Step 6: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # Step 7: Lint check
      - name: Run ESLint
        run: pnpm run lint
        continue-on-error: true
      
      # Step 8: Run unit tests
      - name: Run unit tests
        run: pnpm test -- --coverage --passWithNoTests=false
        env:
          NODE_ENV: test
          ENABLE_INTEGRATION_TESTS: false
      
      # Step 9: Upload coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      # Step 10: Comment PR with test results
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              
              const comment = `## ✅ Unit Tests Results
              
              | Metric | Coverage |
              |--------|----------|
              | Statements | ${total.statements.pct}% |
              | Branches | ${total.branches.pct}% |
              | Functions | ${total.functions.pct}% |
              | Lines | ${total.lines.pct}% |
              
              ✨ All unit tests passed on Node.js ${{ matrix.node-version }}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not parse coverage, skipping comment');
            }
      
      # Step 11: Notify on failure
      - name: Notify on test failure
        if: failure()
        run: |
          echo "❌ Unit tests failed!"
          exit 1
